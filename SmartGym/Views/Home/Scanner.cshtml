
@{
    ViewBag.Title = "Scanner";
    string link1 = "https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js";
    string link2 = "https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js";

}

<div class="container">

    <!-- Outer Row -->
    <div class="row justify-content-center">

        <div class="col-xl-10 col-lg-12 col-md-9">

            <div class="card o-hidden border-0 shadow-lg my-5">
                <div class="card-body p-0">
                    <!-- Nested Row within Card Body -->
                    <div class="row">
                        <div class="col=lg-6 d-none d-lg-block" id="webcam-container"></div>
                        <div class="col-lg-6">
                            <div class="p-5">
                                <div class="text-center">
                                    <h1 class="h4 text-gray-900 mb-4">AI Body Scanner</h1>
                                </div>
                                <div class="user">
                                    <button type="button" class="btn btn-google btn-user btn-block" onclick="init()">Start Scanner</button>
                                    <hr />
                                    <button class="btn btn-primary btn-user btn-block" onclick="onSubmit()">Save Results</button>
                                </div>
                                <div class="text-center">
                                    <div id="label-container"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>

</div>

<script src="@link1"></script>
<script src="@link2"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/o8DSusNbV/";

    let model, webcam, labelContainer, maxPredictions;
    var status;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(300, 300, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
    async function predict() {
        // predict can take in an image, video or canvas html element
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className + ": " + prediction[i].probability.toFixed(2) * 100 + "%";
            labelContainer.childNodes[i].innerHTML = classPrediction;

            if ((prediction[0].probability.toFixed(2) * 100) > 70) {
                status = 2;
            } else if ((prediction[1].probability.toFixed(2) * 100) > 70) {
                status = 4;
            } else {
                status = 1;
            }
        }
    }

    async function onSubmit() {
        $.ajax({
            type: "POST",
            url: "/Healths/ScannerResults",
            data: {
                updated: '2020-12-01',
                healthStatus: status,
                memId: 'EJKPNRMR',
                height: 0,
                weight: 0,
                BMI: 0,
                imageUrl: 'C:\Users\DELL\source\repos\SmartGym\SmartGym\images\MELLO201450745.jpg'

            },
            success: function (data) {
                alert('Results submitted successfully');
            }

        })
    }
</script>

